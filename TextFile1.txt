123222323321231231312231231231213123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213

123222323321231231312231231231213123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213

123222323321231231312231231231213123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213

123222323321231231312231231231213123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213
123222323321231231312231231231213


























public void WriteXML()
        {
            try{
            
            XmlSerializer writer = new XmlSerializer(typeof(Orders));
            FileStream sw = new FileStream("D:\\Универ\\POP\\Курсовая\\WeddingShop\\Orders\\" + name_file + ".txt", FileMode.Create, FileAccess.ReadWrite);
            StreamWriter file = new StreamWriter(sw);
            //writer.Serialize(file, obj1);
            writer.Serialize(file, AllOrders);
            file.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + ex.Message);
            }
        }

		 /*try
            {
                //Сериализуем полученное
                /*XmlWriterSettings settings = new XmlWriterSettings();
                settings.Indent = true;
                settings.IndentChars = ("    ");
                settings.NewLineChars = "\n";
                using (XmlWriter writer = XmlWriter.Create(path, settings))
                {
                    writer.WriteStartElement("Users");

                    writer.WriteStartElement("User");
                    for (int i; i < t.user_list.Count; i++)
                    {
                        writer.WriteElementString("user_id", t.user_list[i].user_id.ToString());
                        writer.WriteEndElement();
                        writer.WriteElementString("user_name", t.user_list[i].user_name.ToString());
                        writer.WriteEndElement();
                        writer.WriteElementString("password", t.user_list[i].password.ToString());
                        writer.WriteEndElement();
                    }
                    writer.Flush();
                }
                
                Program.myForm.Log.Text += "\n \n Список пользователей успешно сериализован в файл " + path + "\n Операция выполнена";
            }
            catch (Exception exc)
            {
                Program.myForm.Log.Text += "\n \n Ошибка";
            }*/
 

 public static List<T> LoadListFromXml <T>(String FileName)
        {
            try
            {
                XmlSerializer serializer = new XmlSerializer(typeof(List<T>));
                using (TextReader textReader = new StreamReader(FileName))
                {
                    return (List<T>)serializer.Deserialize(textReader);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + ex.Message);
            }
        }



Код C#

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29

	

class Form2
{
   public event EventHandler ButtonClicked;
 
   private void button1_click(object sender, EventArgs e)
   {
      OnButtonClicked(EventArgs.Empty);
   }
 
   protected void OnButtonClicked(EventArgs e)
   {
      var evt = ButtonClicked;
      if (evt != null) evt(this, e);
   }
}
 
class Form1
{
   public Form1()
   {
      f = new Form2();
      f.ButtonClicked += Form2ButtonClicked;
   }
 
   private void Form2ButtonClicked(object sender, EventArgs e)
   {
      MessageBox.Show("OMFG!!!11");
   }
}